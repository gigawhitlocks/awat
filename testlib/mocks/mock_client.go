// Code generated by MockGen. DO NOT EDIT.
// Source: model/client.go

// Package mock_model is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/awat/model"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateTranslation mocks base method
func (m *MockClient) CreateTranslation(translationRequest *model.TranslationRequest) (*model.TranslationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTranslation", translationRequest)
	ret0, _ := ret[0].(*model.TranslationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTranslation indicates an expected call of CreateTranslation
func (mr *MockClientMockRecorder) CreateTranslation(translationRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTranslation", reflect.TypeOf((*MockClient)(nil).CreateTranslation), translationRequest)
}

// GetTranslationStatus mocks base method
func (m *MockClient) GetTranslationStatus(translationId string) (*model.TranslationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationStatus", translationId)
	ret0, _ := ret[0].(*model.TranslationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslationStatus indicates an expected call of GetTranslationStatus
func (mr *MockClientMockRecorder) GetTranslationStatus(translationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationStatus", reflect.TypeOf((*MockClient)(nil).GetTranslationStatus), translationId)
}

// GetTranslationStatusesByInstallation mocks base method
func (m *MockClient) GetTranslationStatusesByInstallation(installationId string) ([]*model.TranslationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationStatusesByInstallation", installationId)
	ret0, _ := ret[0].([]*model.TranslationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslationStatusesByInstallation indicates an expected call of GetTranslationStatusesByInstallation
func (mr *MockClientMockRecorder) GetTranslationStatusesByInstallation(installationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationStatusesByInstallation", reflect.TypeOf((*MockClient)(nil).GetTranslationStatusesByInstallation), installationId)
}

// GetAllTranslations mocks base method
func (m *MockClient) GetAllTranslations() ([]*model.TranslationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTranslations")
	ret0, _ := ret[0].([]*model.TranslationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTranslations indicates an expected call of GetAllTranslations
func (mr *MockClientMockRecorder) GetAllTranslations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTranslations", reflect.TypeOf((*MockClient)(nil).GetAllTranslations))
}

// GetTranslationReadyToImport mocks base method
func (m *MockClient) GetTranslationReadyToImport(request *model.ImportWorkRequest) (*model.ImportStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationReadyToImport", request)
	ret0, _ := ret[0].(*model.ImportStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslationReadyToImport indicates an expected call of GetTranslationReadyToImport
func (mr *MockClientMockRecorder) GetTranslationReadyToImport(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationReadyToImport", reflect.TypeOf((*MockClient)(nil).GetTranslationReadyToImport), request)
}

// GetImportStatusesByInstallation mocks base method
func (m *MockClient) GetImportStatusesByInstallation(installationID string) ([]*model.ImportStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportStatusesByInstallation", installationID)
	ret0, _ := ret[0].([]*model.ImportStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportStatusesByInstallation indicates an expected call of GetImportStatusesByInstallation
func (mr *MockClientMockRecorder) GetImportStatusesByInstallation(installationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportStatusesByInstallation", reflect.TypeOf((*MockClient)(nil).GetImportStatusesByInstallation), installationID)
}

// GetImportStatusesByTranslation mocks base method
func (m *MockClient) GetImportStatusesByTranslation(translationID string) ([]*model.ImportStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportStatusesByTranslation", translationID)
	ret0, _ := ret[0].([]*model.ImportStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportStatusesByTranslation indicates an expected call of GetImportStatusesByTranslation
func (mr *MockClientMockRecorder) GetImportStatusesByTranslation(translationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportStatusesByTranslation", reflect.TypeOf((*MockClient)(nil).GetImportStatusesByTranslation), translationID)
}

// ListImports mocks base method
func (m *MockClient) ListImports() ([]*model.ImportStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImports")
	ret0, _ := ret[0].([]*model.ImportStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImports indicates an expected call of ListImports
func (mr *MockClientMockRecorder) ListImports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImports", reflect.TypeOf((*MockClient)(nil).ListImports))
}

// GetImportStatus mocks base method
func (m *MockClient) GetImportStatus(importID string) (*model.ImportStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportStatus", importID)
	ret0, _ := ret[0].(*model.ImportStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImportStatus indicates an expected call of GetImportStatus
func (mr *MockClientMockRecorder) GetImportStatus(importID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportStatus", reflect.TypeOf((*MockClient)(nil).GetImportStatus), importID)
}

// CompleteImport mocks base method
func (m *MockClient) CompleteImport(completed *model.ImportCompletedWorkRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteImport", completed)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteImport indicates an expected call of CompleteImport
func (mr *MockClientMockRecorder) CompleteImport(completed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteImport", reflect.TypeOf((*MockClient)(nil).CompleteImport), completed)
}

// ReleaseLockOnImport mocks base method
func (m *MockClient) ReleaseLockOnImport(importID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLockOnImport", importID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLockOnImport indicates an expected call of ReleaseLockOnImport
func (mr *MockClientMockRecorder) ReleaseLockOnImport(importID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockOnImport", reflect.TypeOf((*MockClient)(nil).ReleaseLockOnImport), importID)
}
